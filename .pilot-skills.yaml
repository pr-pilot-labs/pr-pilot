# Add a new endpoint and write tests for it
- title: Add API endpoint
  args:
    method: HTTP method
    purpose: What the endpoint does
    url: URL of the endpoint
    response: Expected response from the endpoint
  instructions: |
    Add a new API endpoint by doing the following:
    1. Read `api/views.py` and understand how the API views are implemented
    2. Add a new endpoint to the API and write it back to `api/views.py`
    3. Add the path for the new endpoint to `api/urls.py` 
    4. Write tests for the new endpoint in `api/tests/test_api.py`

# Find Sentry error with the most events
- title: Investigate latest Sentry error
  instructions: |
    Investigate a Sentry error by doing the following:
    1. List all open Sentry issues
    2. Find the issue that best matches the given description
    3. Read the three most recent events for the issue
    4. Write a concise description of the error and relevant technical details (e.g. stack trace)
  result: A concise description of the error and relevant technical details

# Write a comprehensive bug report, gather information and notify the QA team
- title: Report a bug
  args:
    description: Description of the bug
    steps_to_reproduce: Steps to reproduce the bug
    observed_behavior: Observed behavior of the bug
    expected_behavior: Expected behavior of the bug
    relevant_files: Relevant files to the bug
  instructions: |
    Report a bug by doing the following:
    1. Read the relevant files to understand the bug
    2. Create a new issue on Github with the following details:
      - The given description
      - Steps to reproduce the bug
      - Observed behavior and expected behavior
      - Technical details based on what you found in the files
    3. Post a notification in the #qa-team Slack channel with a link to the issue
  result: Links to the Github issue and the Slack message

# Act as a teacher and answer questions about the project
- title: Teach new coworker about the project
  args:
    question: Question about the project
    about_coworker: (Optional) Information about the coworker
  instructions: |
    A colleague has a question about this project. Do the following:
    1. Read `.pilot-skills.yaml` and `README.md` to understand the project better
    2. If the user mentions specific files, read them to get more context
    3. If the user mentions specific code, search for it in the project
    4. Answer the question to the best of your ability, tailored to the user's level of understanding
  result: A concise answer to the question

# Find and update relevant Kubernetes resources
- title: Change the Helm Chart
  args:
    change_request: Description of the change
  instructions: |
    We want to update the Helm Chart. Do the following:
    1. Determine the relevant files in the Helm Chart by listing the `helm-chart/templates` directory
    2. Read the relevant files and update them accordingly
    3. Write the changes back to the Helm Chart

# Update the user documentation
- title: Update the user documentation
  args:
    what_changed: What part of PR Pilot changed
  instructions: |
    We want to update the user documentation. Do the following:
    1. Determine the relevant files in the `docs/source` directory
    2. Read the relevant files and update them accordingly
    3. Write the changes back to the user documentation

# Find an error on Sentry and gather technical information
- title: Find and investigate error on Sentry
  args:
    error_to_find: Description of the error
  instructions: |
    Investigate an error on Sentry by doing the following:
    1. List all open Sentry issues
    2. Find the issue that best matches the given description
    3. Read the three most recent events for the issue and collect technical details (stack trace, etc)
    4. Find and read the relevant code files to understand the context of the error
    5. Write a concise description of the error and relevant technical details
    IMPORTANT: Do NOT attempt to fix or report the error, only gather information and respond.
  result: A concise description of the error and relevant technical details

- title: Make a beautiful HTML page
  args:
    content: Content of the page
    purpose: What the page does
    file_path: Path into which the page will be saved
  instructions: |
    1. Search the internet for the latest BulmaCSS CDN version
    2. Generate a self-contained HTML page that combines the given content with BulmaCSS
    3. Write the HTML page to the given file path
    
    When generating the page, follow these rules:
    - Use the latest BulmaCSS version
    - Organize the content in a visually appealing way using Bulma components
    - Use FA icons and emojis to make the page more engaging
    - Make full use of Bulma CSS classes to style the page